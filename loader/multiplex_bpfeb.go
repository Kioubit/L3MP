// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package loader

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadMultiplex returns the embedded CollectionSpec for multiplex.
func loadMultiplex() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MultiplexBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load multiplex: %w", err)
	}

	return spec, err
}

// loadMultiplexObjects loads multiplex and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*multiplexObjects
//	*multiplexPrograms
//	*multiplexMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMultiplexObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMultiplex()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// multiplexSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type multiplexSpecs struct {
	multiplexProgramSpecs
	multiplexMapSpecs
}

// multiplexSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type multiplexProgramSpecs struct {
	Egress  *ebpf.ProgramSpec `ebpf:"egress"`
	Ingress *ebpf.ProgramSpec `ebpf:"ingress"`
}

// multiplexMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type multiplexMapSpecs struct {
	IngressDestinationsMap *ebpf.MapSpec `ebpf:"ingress_destinations_map"`
	SettingsMap            *ebpf.MapSpec `ebpf:"settings_map"`
}

// multiplexObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMultiplexObjects or ebpf.CollectionSpec.LoadAndAssign.
type multiplexObjects struct {
	multiplexPrograms
	multiplexMaps
}

func (o *multiplexObjects) Close() error {
	return _MultiplexClose(
		&o.multiplexPrograms,
		&o.multiplexMaps,
	)
}

// multiplexMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMultiplexObjects or ebpf.CollectionSpec.LoadAndAssign.
type multiplexMaps struct {
	IngressDestinationsMap *ebpf.Map `ebpf:"ingress_destinations_map"`
	SettingsMap            *ebpf.Map `ebpf:"settings_map"`
}

func (m *multiplexMaps) Close() error {
	return _MultiplexClose(
		m.IngressDestinationsMap,
		m.SettingsMap,
	)
}

// multiplexPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMultiplexObjects or ebpf.CollectionSpec.LoadAndAssign.
type multiplexPrograms struct {
	Egress  *ebpf.Program `ebpf:"egress"`
	Ingress *ebpf.Program `ebpf:"ingress"`
}

func (p *multiplexPrograms) Close() error {
	return _MultiplexClose(
		p.Egress,
		p.Ingress,
	)
}

func _MultiplexClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed multiplex_bpfeb.o
var _MultiplexBytes []byte
